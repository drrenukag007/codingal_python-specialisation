# -*- coding: utf-8 -*-
"""Codingal Module 8 Grade 6-8 Advanced Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FNnHFlzwJ_ia_v6Jri2vXBqUbigQdH7u

## Module 8
"""

# Lesson 43- Lists
lst = ['Apple', 'Guava', 'Mango', 'Banana', 'Kiwi']

print("Length of list:", len(lst))
print("First Element:", lst[0])
print("Last Element:", lst[-1])

lst.append('Papaya')
print("Updated List :", lst)

lst.remove('Guava')
print("Updated List :", lst)

lst.sort()
print("Sorted List:", lst)

lst.pop(1)
print("Updated List :", lst)

lst.reverse()
print("Reversed List :", lst)

print("Multiplication on List :", lst*2)

lst = lst[:4]
print("Sliced List :", lst)

lst.clear()
print("Updated List :", lst)

# dictionary

# empty dictionary
my_dict = {}

# dictionary with integer keys
my_dict = {1: 'apple', 2: 'ball'}

# dictionary with mixed keys
my_dict = {'name': 'John', 1: [2, 4, 3]}

my_dict = {'name': 'Jack', 'age': 26}

# Output: Jack
print(my_dict['name'])
print(my_dict.get('age'))

# update value
my_dict['age'] = 27
print(my_dict)

# add item
my_dict['address'] = 'Downtown'
print(my_dict)

# remove particular element
my_dict.pop('age')
print(my_dict)

# access a particular element
print("Address :", my_dict.get('address'))

# remove all the elements
my_dict.clear()
print(my_dict)

# list to dict

def test(lst):
	result = {}
	for item in lst:
		result[item[0]] = item[1:]
	return result

students = [[1, 'Jean Castro', 'V'], [2, 'Lula Powell', 'V'], [3, 'Brian Howell', 'VI'], [4, 'Lynne Foster', 'VI'], [5, 'Zachary Simon', 'VII']]

print("\nOriginal list of lists:")
print(students)
print("\nConverted  lists to a dictionary:")
print(test(students))

# project 1- number guessing game


import random

lower_bound = 1
upper_bound = 5
max_attempts = 12
secret_number = random.randint(lower_bound, upper_bound)






def get_guess():
    while True:
        guess = int(input("Guess a number between 1 and 5: "))
        if lower_bound <= guess <= upper_bound:
            return guess
        else:
            print("Invalid input. Please enter a number within the specified range.")




def check_guess(guess, secret_number):
    if guess == secret_number:
      return "Correct"
    elif guess < secret_number:
        return "Too low"
    else:
        return "Too high"



def play_game():
    attempts = 0
    won = False

    while attempts < max_attempts:
        attempts += 1
        guess = get_guess()
        result = check_guess(guess, secret_number)
        if result == "Correct":
            print(f"Congratulations! You guessed the secret number {secret_number} in {attempts} attempts.")
            won = True
            break
        else:
            print(f"{result}. Try again!")
    if not won:
        print(f"Sorry, you ran out of attempts! The secret number is {secret_number}.")



if __name__ == "__main__":
    print("Welcome to the Number Guessing Game!")
    play_game()

# operation on tuple

# Empty tuple
my_tuple = ()
print(my_tuple)

# Tuple having integers
my_tuple = (1, 2, 3)
print(my_tuple)

# tuple with mixed datatypes
my_tuple = (1, "Hello", 3.4)
print(my_tuple)

# nested tuple
my_tuple = ("mouse", [8, 4, 6], (1, 2, 3))
print(my_tuple)

# Accessing tuple elements using indexing
my_tuple = ('p','e','r','m','i','t')
print(my_tuple[0])
print(my_tuple[5])

# nested tuple
n_tuple = ("mouse", [8, 4, 6], (1, 2, 3))

# nested index
print(n_tuple[0][3])
print(n_tuple[1][1])

# Slicing
print("Sliced :", my_tuple[1:4])

# Iterating through tuple
for letter in (my_tuple):
    print("Hello", letter)

# operation on sets

my_set = {1,2,2,3,4,4,4}
print("Set :", my_set)

my_set.add(5)
print("Updated Set:", my_set)

set1 = my_set
set2 = {2,4,4,6}

print("\nSet 1", set1)
print("Set 2", set2)
print("Difference")
print(set1.difference(set2))
print("Symmeteric Difference")
print(set1.symmetric_difference(set2))

# set union

setc1 = {"green", "blue"}
setc2 = {"blue", "yellow"}
print("Original sets:")
print(setc1)
print(setc2)
setc = setc1.union(setc2)
print("\nUnion of above sets:")
print(setc)

# set intersection

setx = {"green", "blue"}
sety = {"blue", "yellow"}
print("Original set elements:")
print(setx)
print(sety)
print("\nIntersection of two said sets:")
setz = setx.intersection(sety)
print(setz)

# project 2- tuple to list

# Define a tuple
GFG_tuple = (1, 2, 3)

# Convert the tuple to a list
GFG_list = list(GFG_tuple)
print(GFG_list)

# Lesson 45- student class



class student:
	grade = 10
	print("Hi I am a student of grade", grade)

ob = student()

# class student-2

class student:
	grade = 10
	name = "Penguin"

	def introduction(self):
		print("Hi I am a student")

	def details(self):
		print("My name is", self.name)
		print("I study in Grade", self.grade)

ob = student()
ob.introduction()
ob.details()

# class parrot

class Parrot:

    # class attribute
    species = "bird"

    # instance attribute
    def __init__(self, name, age):
        self.name = name
        self.age = age

# instantiate the Parrot class
blu = Parrot("Blu", 10)
woo = Parrot("Woo", 15)

# access the class attributes
print("Blu is a {}".format(blu.species))
print("Woo is also a {}".format(woo.species))

# access the instance attributes
print("{} is {} years old".format( blu.name, blu.age))
print("{} is {} years old".format( woo.name, woo.age))

# class parrot-2

class Parrot:

    # instance attributes
    def __init__(self, name, age):
        self.name = name
        self.age = age

    # instance method
    def sing(self, song):
        return "{} sings {}".format(self.name, song)

    def dance(self):
        return "{} is now dancing".format(self.name)

# instantiate the object
blu = Parrot("Blu", 10)

# call our instance methods
print(blu.sing("'Happy'"))
print(blu.dance())

# project3- robot intro

import pygame
import sys

# Initialize Pygame
pygame.init()

# Screen settings
screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption('Simple Robot Simulation')

# Colors
WHITE = (255, 255, 255)
RED = (255, 0, 0)

# Robot settings
robot_pos = [400, 300]
robot_size = 50
robot_speed = 5

# Main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        robot_pos[0] -= robot_speed
    if keys[pygame.K_RIGHT]:
        robot_pos[0] += robot_speed
    if keys[pygame.K_UP]:
        robot_pos[1] -= robot_speed
    if keys[pygame.K_DOWN]:
        robot_pos[1] += robot_speed

    # Clear screen
    screen.fill(WHITE)

    # Draw robot (a simple rectangle)
    pygame.draw.rect(screen, RED, (*robot_pos, robot_size, robot_size))

    # Update display
    pygame.display.flip()

    # Cap the frame rate
    pygame.time.Clock().tick(30)

# Lesson 46 -OOPSII

class Employee:

	# Initializing (Constructor)
	def __init__(self):
		print('Employee created.')

	# Deleting (Destructor)
	def __del__(self):
		print('Destructor called, Employee deleted.')

obj = Employee()
del obj

class Library:

    def __init__(self, list_of_books, name):
        self.booksList = list_of_books
        self.name = name
        self.lendDict = {}

    def displayBooks(self):
        print(f"We have the following books in our library: {self.name}")
        for book in self.booksList:
            print(book)

    def lendBook(self, user, book):
        if book not in self.booksList:
            print("Sorry, we do not have that book.")
        elif book in self.lendDict:
            print(f"The book is already being used by {self.lendDict[book]}")
        else:
            self.lendDict[book] = user
            print(
                "Lender-Book database has been updated. You can take the book now."
            )

    def addBook(self, book):
        self.booksList.append(book)
        print(f"{book} has been added to the book list.")

    def returnBook(self, book):
        if book in self.lendDict:
            del self.lendDict[book]
            print("Book has been returned.")
        else:
            print("That book wasn't borrowed from us.")


if __name__ == '__main__':
    books = Library([
        'Python', 'Rich Dad Poor Dad', 'Harry Potter', 'C++ Basics',
        'Algorithms by CLRS'
    ], "Let's Upskill")
    user_name = input("Welcome to our library! Please enter your name: ")

    while True:
        print(
            f"\nHello {user_name}, welcome to the {books.name} library. Please choose an option:"
        )
        print(
            "1. Display Books\n2. Lend a Book\n3. Add a Book\n4. Return a Book\n5. Quit"
        )
        user_choice = input("Enter your choice to continue: ")

        if user_choice not in ['1', '2', '3', '4', '5']:
            print("Please enter a valid option.")
            continue

        if user_choice == '1':
            books.displayBooks()
        elif user_choice == '2':
            book = input("Enter the name of the book you want to lend: ")
            books.lendBook(user_name, book)
        elif user_choice == '3':
            book = input("Enter the name of the book you want to add: ")
            books.addBook(book)
        elif user_choice == '4':
            book = input("Enter the name of the book you want to return: ")
            books.returnBook(book)
        elif user_choice == '5':
            print(f"Thank you for using the library, {user_name}. Goodbye!")
            break

# project 4

class Addition:
    # Defininf a constructor
    def __init__(self,x,y,z):
        # with the help of self.xyz
		# we are initializing instance variable
        self.num1=x
        self.num2=y
        self.num3=z

    def result(self):
        self.num=self.num1+self.num2+self.num3
        print('Output:',self.num)


# Here we create the object for call
# which calls the constructor
x = int(input("Enter 1st Number"))
y = int(input("Enter 2nd Number"))
z = int(input("Enter 3rd Number"))
Sum = Addition(x,y,z)

# calling the instance method
# using the object Sum
Sum.result()

# Class 47- Inheritance and Abstraction

# parent class
class Person( object ):

		# __init__ is known as the constructor
		def __init__(self, name, idnumber):
				self.name = name
				self.idnumber = idnumber
		def display(self):
				print(self.name)
				print(self.idnumber)

# child class
class Employee( Person ):
		def __init__(self, name, idnumber, salary, post):
				self.salary = salary
				self.post = post

				# invoking the __init__ of the parent class
				Person.__init__(self, name, idnumber)


# creation of an object variable or an instance
a = Employee('Penguin', 20210401, 15000, "Intern")

# calling a function of the class Person using its instance
a.display()

# student class

class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

class Student(Person):
  def __init__(self, fname, lname, year):
    super().__init__(fname, lname)
    self.graduationyear = year

x = Student("Joey", "King", 2021)
x.printname()
print(x.graduationyear)

# animal class abstraction

# import necessary packages
from abc import ABC, abstractmethod
# create a base class
class Animal(ABC):

    # abstract method
	# should be implemented by all sub-classes
	def move(self):
		pass

# sub classes
class Human(Animal):

	def move(self):
		print("I can walk and run")

class Snake(Animal):

	def move(self):
		print("I can crawl")

class Dog(Animal):

	def move(self):
		print("I can bark")

class Lion(Animal):

	def move(self):
		print("I can roar")

# Driver code
R = Human()
R.move()

K = Snake()
K.move()

R = Dog()
R.move()

K = Lion()
K.move()

# polymorphism and encapsulation

class Computer:

    def __init__(self):
        self.__maxprice = 900

    def sell(self):
        print("Selling Price: {}".format(self.__maxprice))

    def setMaxPrice(self, price):
        self.__maxprice = price

c = Computer()
c.sell()

# change the price
c.__maxprice = 1000
c.sell()

# using setter function
c.setMaxPrice(1000)
c.sell()

class Cat:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def info(self):
        print(f"I am a cat. My name is {self.name}. I am {self.age} years old.")

    def make_sound(self):
        print("Meow")


class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def info(self):
        print(f"I am a dog. My name is {self.name}. I am {self.age} years old.")

    def make_sound(self):
        print("Bark")


cat1 = Cat("Dodo", 2.5)
dog1 = Dog("Tyson", 8)

for animal in (cat1, dog1):
    animal.make_sound()
    animal.info()